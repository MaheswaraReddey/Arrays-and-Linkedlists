import java.util.LinkedList;
import java.util.List;
import java.util.Collections;

class LinkedListNode {
    int data;
    LinkedListNode next;

    public LinkedListNode(int data) {
        this.data = data;
        this.next = null;
    }
}

public class MergeAndSortLinkedLists {
    public static LinkedListNode mergeLinkedLists(LinkedListNode head1, LinkedListNode head2) {
        LinkedListNode mergedHead = new LinkedListNode(-1);
        LinkedListNode current = mergedHead;

        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                current.next = head1;
                head1 = head1.next;
            } else {
                current.next = head2;
                head2 = head2.next;
            }
            current = current.next;
        }

        if (head1 != null) {
            current.next = head1;
        }
        if (head2 != null) {
            current.next = head2;
        }

        return mergedHead.next;
    }

    public static LinkedListNode sortLinkedList(LinkedListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        LinkedListNode slow = head;
        LinkedListNode fast = head;
        LinkedListNode prev = null;

        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

        prev.next = null;

        LinkedListNode left = sortLinkedList(head);
        LinkedListNode right = sortLinkedList(slow);

        return mergeSortedLists(left, right);
    }

    public static LinkedListNode mergeSortedLists(LinkedListNode head1, LinkedListNode head2) {
        LinkedListNode mergedHead = new LinkedListNode(-1);
        LinkedListNode current = mergedHead;

        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                current.next = head1;
                head1 = head1.next;
            } else {
                current.next = head2;
                head2 = head2.next;
            }
            current = current.next;
        }

        if (head1 != null) {
            current.next = head1;
        }
        if (head2 != null) {
            current.next = head2;
        }

        return mergedHead.next;
    }

    public static void printLinkedList(LinkedListNode head) {
        LinkedListNode current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        LinkedListNode head1 = new LinkedListNode(1);
        head1.next = new LinkedListNode(3);
        head1.next.next = new LinkedListNode(5);

        LinkedListNode head2 = new LinkedListNode(2);
        head2.next = new LinkedListNode(4);
        head2.next.next = new LinkedListNode(6);

        System.out.println("Linked List 1:");
        printLinkedList(head1);
        System.out.println("Linked List 2:");
        printLinkedList(head2);

        LinkedListNode mergedHead = mergeLinkedLists(head1, head2);
        System.out.println("Merged Linked List:");
        printLinkedList(mergedHead);

        LinkedListNode sortedHead = sortLinkedList(mergedHead);
        System.out.println("Sorted Linked List:");
        printLinkedList(sortedHead);
    }
}
